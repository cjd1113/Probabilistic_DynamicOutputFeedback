

function options = gaoptions()

%% PARALLELIZATION
optionstemp = optimoptions('ga','UseParallel',true,'UseVectorized',false);
%This option enables fitness and constraint evaluation in parallel


%% POPULATION SIZE

PopSize = 96;
optionstemp = optimoptions('ga',optionstemp, 'PopulationSize',PopSize);
%note that a population of 200 is the Matlab default if we have more than 5
%variables.  We will DEFINITELY have more than 5, unfortunatley.


%% INITIAL POPULATION MATRIX

%Specifies the initial population for the GA.  This array must have no more
%than "population size" rows, and exactly "number of variables" columns.
%If we have a partial initial population (which we will), meaning fewer
%than "population size" rows, then the GA calls a creation function to
%generate the remaining individuals.

%THIS WILL BE THE RESULTING CONTROLLERS FROM LOOP-AT-A-TIME D-K ITERATION
%STEP.  THIS IS TAKEN CARE OF IN THE MAIN FUNCTION.

% optionstemp = optimoptions('ga',optionstemp,'InitialPopulation',InitPopArray);


%% INITIAL POPULATION RANGE

%Specifies the range of the vectors in the inital population that is
%generated byt he gacreation uniform creation function.  I can set Initial
%range to be a matrix with two rows and "number of variables" columns, each
%column of which has the form [lb; ub].  This initial range only restricts
%the initial population.  Not subsequent populations.

%DO NOT SET THIS TO START OUT.  LET GA SEARCH A "BROAD" SPACE

%% FITNESS SCALING

%We have rank and top.  Rank tends to be more diverse, searching over a
%greater space.  It simply ranks the fittest individuals in order.  Top, on
%the other hand, assigns (by default) the 40% of top individuals the same
%score, setting all other individuals to zero.  I will probably want to try
%both.

optionstemp = optimoptions('ga',optionstemp,'FitnessScalingFcn',@fitscalingrank);


%% SELECTION FUNCTION


optionstemp = optimoptions('ga',optionstemp,'SelectionFcn',@selectionstochunif);

%We will try tournament selection, first.  This seemed to work for Marrison
%and Stengel.
% tournamentsize = 8; %Chosen arbitrarily
% optionstemp = optimoptions('ga',optionstemp,'SelectionFcn',{@selectiontournament,tournamentsize});

%% MUTATION AND CROSSOVER VARIATION

%%MUTATION
%We will use gaussian mutation, and will set scale to 1.  Shrink [0,1] will be
%set such that 1-SHRINK is a relatively small number, since it seems
%intuitive that we do not want to stray tooooo far away from our initial
%solution, which we found using loop-at-a-time D-K iteration

SHRINK = 0.99;

optionstemp = optimoptions('ga',optionstemp,'MutationFcn',{@mutationgaussian,1,SHRINK});

%%CROSSOVER
%Crossover fraction of 1 means all children OTHER THAN elite individuals
%are crossover children.  0 means all children are mutation children.

%We can specify the elite count in reproduction options.  Similarly, we can
%specify the crossover fraction.  So...if the Population size is 20 and the
%Elite count is 2, and the crossover fraction is 0.8, the numbers of each
%type of children in the next generation are: 2 elite children, 0.8*18 =
%14.4=14 to get the number of crossover children.  The remaining 4
%individuals, other than elite children, are mutation children.

%Note that the default is 0.8 for crossover
optionstemp = optimoptions('ga',optionstemp,'CrossoverFraction',0.8);

%On elite count, the default is 0.05*PopulationSize
E_percent = 0.2;
optionstemp = optimoptions('ga',optionstemp,'EliteCount',ceil(E_percent*PopSize));


%% STOPPING CONDITIONS FOR THE ALGORITHM

%MaxGenerations 
%default is set to 100*numberofVariables ---this will be incredibly high for me

%Since one generation evaluation is estimated to take 15 minutes...which
%could be 30 minutes if each core on a 24-core node must evaluate 2 members
%of a population, we shall set max generations to 400.  Note that the cost
%function is created such that we break out of the most expensive loop if
%the infinity norm is exceeded, which should happen for a lot of our
%population.  Moreover, it will be smart to only evaluate the infinity norm
%is the system is stable.  Since if it is unstable, the infinity norm will
%be Inf.

optionstemp = optimoptions('ga',optionstemp,'MaxGenerations',400);

%MaxStallGenerations - default is 50.  
%MaxStallGenerations is the number of generations beyond which the "best"
%fitness value is found that we pursue in the event that no improvement is
%made beyond the best

optionstemp = optimoptions('ga',optionstemp,'MaxStallGenerations',20);

%Fitness limit!!!!!!!
%This can perhaps be the most powerful stopping criteria for us.  This is
%because we are solving a stochastic optimization problem where our fitness
%function, at the end of the day, is a probability.  That is, we seek a
%controller that is probabilistically robust with probability, say 1-Beta.
%Therefore, we can say that we want to make Beta as small as possible
%(although it can never be zero).  It may, however, behoove us to scale
%this value.  Nevertheless, we can set

%We set it to the default, for now.  THIS MUST BE ADJUSTED LATER.
optionstemp = optimoptions('ga',optionstemp,'FitnessLimit',-Inf);

%Algorithm time limit
%Specifies the maximum time in seconds the genetic algorithm runs before stopping, 
%as measured by tic and toc. This limit is enforced after each iteration, 
%so ga can exceed the limit when an iteration takes substantial time

maxtimedays = 7; %
maxtimeseconds = maxtimedays * 24 * 60 * 60;
optionstemp = optimoptions('ga',optionstemp,'MaxTime',maxtimeseconds);


%FunctionTolerance
%Depending upon where we set this, it would seem that we could get stuck in
%a very large hull that is not the global optimimum if this is too large.
%Right now, the default is set to 1e-6.  We will formally call this out,
%here, so that we can adjust if we deem appropriate later on

%The algorithm stops if the average relative change in the best fitness 
%function value over Stall generations is less than or equal to Function 
%tolerance. (If the StallTest option is 'geometricWeighted', then the test 
%is for a geometric weighted average relative change.)
functiontolerance = 1e-3;
optionstemp = optimoptions('ga',optionstemp,'FunctionTolerance',functiontolerance);


%% RETURN THE OPTIONS HANDLE

options = optionstemp;

end